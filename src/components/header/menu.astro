---
import { Icon } from "astro-icon/components";
---

<div class="fixed right-0 top-1/2 z-10 translate-y-1/2">
  <nav class="top-right open">
    <!-- <a class="disc l1 bg-amber-100 dark:bg-gray-100 dark:text-black ">
      <div>Messages</div>
    </a> -->
    <a class="disc l2 bg-amber-200 dark:bg-gray-200 dark:text-black "> Home </a>
    <a class="disc l3 bg-amber-300 dark:bg-gray-300 dark:text-black ">
      <div>Proyectos</div>
    </a>
    <a class="disc l4 bg-amber-400 dark:bg-gray-400 dark:text-black ">
      <div>Contacto</div>
    </a>
    <button
      id="theme-toggle"
      class="disc l5 toggle bg-gray-200 transition-colors dark:bg-gray-800/90"
    >
      <Icon id="theme-toggle-dark-icon" class="hidden h-5 w-5 dark:block" name="lucide:moon" />
      <Icon id="theme-toggle-light-icon" class="block h-5 w-5 dark:hidden" name="lucide:sun" />
    </button>
  </nav>
</div>

<script is:inline>
  const themeToogleButton = document.getElementById("theme-toggle");
  const htmlElement = document.documentElement;

  function setTheme(theme) {
    localStorage.setItem("theme", theme);
    htmlElement.classList.toggle("dark", theme === "dark");
  }

  function toggleTheme() {
    const currentTheme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");

    const newTheme = currentTheme === "dark" ? "light" : "dark";
    setTheme(newTheme);
  }

  const savedTheme =
    localStorage.getItem("theme") ||
    (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");

  setTheme(savedTheme);

  themeToogleButton.addEventListener("click", toggleTheme);

  // toggle = document.querySelectorAll(".toggle")[0];
  // nav = document.querySelectorAll("nav")[0];
  // toggle_open_text = "Menu";
  // toggle_close_text = "Close";

  // toggle.addEventListener(
  //   "click",
  //   function () {
  //     nav.classList.toggle("open");

  //     if (nav.classList.contains("open")) {
  //       toggle.innerHTML = toggle_close_text;
  //     } else {
  //       toggle.innerHTML = toggle_open_text;
  //     }
  //   },
  //   false,
  // );

  // setTimeout(function () {
  //   nav.classList.toggle("open");
  // }, 800);

  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
    if (!localStorage.getItem("theme")) {
      setTheme(e.matches ? "dark" : "light");
    }
  });
</script>
<style lang="scss">
  $size: 30px;
  $items: 5;
  $transition: 0.5s;
  $bounce: cubic-bezier(0.3, 1.4, 0.5, 0.9);
  // $color-inner: gold;
  // $color-outer: tomato;
  // $background: mix($color-inner, $color-outer);
  // $black: shade($color-outer, 80%);
  $start-scale: 0.5;
  $start-rot: -130deg;

  nav {
    display: block;
    position: fixed;
    width: $size * $items * 2;
    height: $size * $items * 2;
    user-select: none;
    transform: translate3d($size * 0.5, -$size * 0.5, 0);
    transition: transform $transition $bounce;

    &.open {
      transform: translate3d(0, 0, 0);
    }

    &.top-right {
      top: -$size * ($items - 2.2);
      right: -$size * ($items - 2.2);
    }
  }

  .disc {
    position: absolute;
    display: inline-block;
    text-align: center;
    cursor: pointer;
    font:
      $size * 0.5 Alegreya Sans,
      sans-serif;
    line-height: $size * 0.8;
    padding-top: $size * 0.2;
    border-radius: $size * $items;
    transform: scale3d($start-scale, $start-scale, $start-scale) rotate3d(0, 0, 1, $start-rot);
    pointer-events: none;
    opacity: 0;
    cursor: pointer;
    transition:
      transform $transition $bounce,
      opacity $transition;

    div {
      transform: rotate(180deg);
    }

    .open & {
      pointer-events: auto;
      opacity: 1;
    }
  }

  @for $i from 1 through $items {
    .l#{$i} {
      $i: $i - 1;
      $-i: $items - $i;
      $pct: $i/$items * 100%;
      // $color: mix($color-inner, $color-outer, $pct);

      top: $i * $size;
      left: $i * $size;
      right: $i * $size;
      bottom: $i * $size;
      // background: $color;
      transition-delay: $i * $transition/$items;

      .open & {
        transition-delay: $i * $transition/$items;
        transform: scale3d(1, 1, 1) rotate3d(0, 0, 1, $start-rot);
        opacity: 1;

        &:hover {
          // background: shade($color, 90%);
          // color: $color;
          transition-delay: 0s;
        }

        &:active {
          // background: shade($color, 50%);
          // color: $color;
        }

        &.toggle {
          transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, $start-rot - 180deg);
        }
      }
    }
  }

  .toggle {
    line-height: $size * 2;
    padding: 0;
    width: $size * 2;
    // background: $color-inner;
    // opacity: 1;
    transform: none;
    pointer-events: auto;
    transition-delay: 0s;
    display: flex;
    justify-content: center;
    align-items: center;

    .open & {
      transform: rotate3d(0, 0, 1, 0deg);
    }

    &:hover {
      // background: shade($color-inner, 90%);
      text-decoration: underline;
    }
    &:active {
      // background: shade($color-inner, 50%);
      // color: rgba($color-inner, 0.5);
      transform: scale(0.9);
      transition-duration: 0s;
    }
  }
</style>
